require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const webpush = require('web-push');
const cron = require('node-cron');
const Task = require('./models/Task');
const User = require('./models/User');

// --- C·∫•u h√¨nh (Kh√¥ng ƒë·ªïi) ---
const app = express();
const PORT = process.env.PORT || 3000;
app.use(express.static('public'));
app.use(express.json());
try {
    webpush.setVapidDetails(process.env.VAPID_SUBJECT, process.env.VAPID_PUBLIC_KEY, process.env.VAPID_PRIVATE_KEY);
    console.log("‚úÖ VAPID keys ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.");
} catch (error) {
    console.error("‚ùå L·ªñI C·∫§U H√åNH VAPID KEYS:", error);
}
app.use('/api/tasks', require('./routes/taskRoutes'));
app.use('/api/users', require('./routes/authRoutes'));
app.use('/api/push', require('./routes/pushRoutes'));
mongoose.connect(process.env.MONGO_URI)
    .then(() => {
        console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');
        app.listen(PORT, () => console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i Port: ${PORT}`));
    })
    .catch((err) => console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err));

const REMINDER_MAP = {
    '5m': 5, '15m': 15, '30m': 30, '1h': 60, '2h': 120, '5h': 300,
};
// --- T√°c v·ª• ki·ªÉm tra ƒë·ªãnh k·ª≥ (Cron Job) - PHI√äN B·∫¢N HO√ÄN CH·ªàNH ---
cron.schedule('* * * * *', async () => { // Ch·∫°y m·ªói ph√∫t
    const now = new Date();
    console.log(`[${now.toISOString()}] Cron job: B·∫Øt ƒë·∫ßu ki·ªÉm tra...`);

    try {
        // T√¨m T·∫§T C·∫¢ c√°c nhi·ªám v·ª• ch∆∞a ho√†n th√†nh v√† c√≤n h·∫°n
        const activeTasks = await Task.find({
            isCompleted: false,
            dueDate: { $gt: now } // Ch·ªâ l·∫•y task ch∆∞a h·∫øt h·∫°n
        }).populate('user', 'pushSubscription email'); // L·∫•y lu√¥n th√¥ng tin user c·∫ßn thi·∫øt

        console.log(` -> T√¨m th·∫•y ${activeTasks.length} nhi·ªám v·ª• ƒëang ho·∫°t ƒë·ªông.`);

        for (const task of activeTasks) {
            const dueDate = new Date(task.dueDate);

            // --- X·ª≠ l√Ω th√¥ng b√°o "S·∫Øp ƒë·∫øn h·∫°n" ---
            for (const reminderKey of task.reminderTimes) {
                const minutesBefore = REMINDER_MAP[reminderKey];
                if (!minutesBefore) continue; // B·ªè qua n·∫øu key kh√¥ng h·ª£p l·ªá

                const reminderTime = new Date(dueDate.getTime() - minutesBefore * 60 * 1000);
                const notifiedKey = `upcoming_${reminderKey}`;
                const hasNotified = task.notified.get(notifiedKey);

                // Ki·ªÉm tra xem ƒë√£ ƒë·∫øn l√∫c g·ª≠i th√¥ng b√°o ch∆∞a (trong v√≤ng 1 ph√∫t qua)
                const isTimeToSend = reminderTime <= now && reminderTime > new Date(now.getTime() - 60 * 1000);

                if (isTimeToSend && !hasNotified) {
                    await sendNotificationForTask(task, 'upcoming', reminderKey, minutesBefore);
                }
            }

            // --- X·ª≠ l√Ω th√¥ng b√°o "ƒê√£ ƒë·∫øn h·∫°n" ---
            const notifiedDueKey = 'due';
            const hasNotifiedDue = task.notified.get(notifiedDueKey);
            const isTaskDueNow = dueDate <= now && dueDate > new Date(now.getTime() - 60 * 1000);

            if (isTaskDueNow && !hasNotifiedDue) {
                await sendNotificationForTask(task, 'due');
            }
        }
    } catch (error) {
        console.error('‚ùå L·ªói nghi√™m tr·ªçng trong cron job:', error);
    }
    console.log(`[${new Date().toISOString()}] Cron job: K·∫øt th√∫c chu k·ª≥.`);
});

// H√†m tr·ª£ gi√∫p ƒë·ªÉ g·ª≠i th√¥ng b√°o v√† c·∫≠p nh·∫≠t DB
async function sendNotificationForTask(task, type, reminderKey = '', minutesBefore = 0) {
    const user = task.user; // User ƒë√£ ƒë∆∞·ª£c populate
    if (!user || !user.pushSubscription) {
        // console.log(`   - B·ªè qua task "${task.title}" v√¨ kh√¥ng t√¨m th·∫•y user ho·∫∑c subscription.`);
        return;
    }

    let bodyText = '';
    let notifiedKey = '';

    if (type === 'upcoming') {
        let timeUnit = '';
        if (reminderKey.includes('m')) {
            timeUnit = reminderKey.replace('m', ' ph√∫t');
        } else if (reminderKey.includes('h')) {
            timeUnit = reminderKey.replace('h', ' ti·∫øng');
        }
        bodyText = `Nhi·ªám v·ª• "${task.title}" s·∫Ω h·∫øt h·∫°n trong kho·∫£ng ${timeUnit} n·ªØa!`;
        notifiedKey = `upcoming_${reminderKey}`;
    } else { // type === 'due'
        bodyText = `ƒê√£ ƒë·∫øn h·∫°n ho√†n th√†nh nhi·ªám v·ª• "${task.title}"!`;
        notifiedKey = 'due';
    }

    const payload = JSON.stringify({ title: 'üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•!', body: bodyText });

    try {
        console.log(`   - Chu·∫©n b·ªã g·ª≠i th√¥ng b√°o "${notifiedKey}" cho task: "${task.title}" t·ªõi user ${user.email}...`);
        await webpush.sendNotification(user.pushSubscription, payload);
        console.log(`   - ‚úÖ G·ª≠i th√†nh c√¥ng!`);

        // ƒê√°nh d·∫•u ƒë√£ th√¥ng b√°o b·∫±ng c√°ch c·∫≠p nh·∫≠t Map
        await Task.findByIdAndUpdate(task._id, { $set: { [`notified.${notifiedKey}`]: true } });

    } catch (error) {
        if (error.statusCode === 410 || error.statusCode === 404) { // Subscription h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i
            console.log(`   - ‚ùó Subscription h·∫øt h·∫°n/kh√¥ng h·ª£p l·ªá cho user ${user.email}. ƒêang x√≥a...`);
            // Ch·ªâ x√≥a subscription, kh√¥ng c·∫ßn save user v√¨ user ƒë√£ ƒë∆∞·ª£c l·∫•y t·ª´ populate
             await User.findByIdAndUpdate(user._id, { pushSubscription: null });
        } else {
            console.error(`   - ‚ùå L·ªói khi g·ª≠i th√¥ng b√°o (${error.statusCode}):`, error.body || error);
        }
    }
}