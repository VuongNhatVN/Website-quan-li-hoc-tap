// server.js
require('dotenv').config(); // N·∫°p c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
const express = require('express');
const mongoose = require('mongoose'); // Th√™m mongoose
const webpush = require('web-push');
const cron = require('node-cron');
const Task = require('./models/Task');
const User = require('./models/User');

const app = express();
const PORT = process.env.PORT || 3000;
const taskRoutes = require('./routes/taskRoutes');
const authRoutes = require('./routes/authRoutes');

cron.schedule('* * * * *', async () => {
    console.log(`[${new Date().toLocaleTimeString()}] Cron job: ƒêang ki·ªÉm tra c√°c nhi·ªám v·ª•...`);
    
    try {
        const now = new Date();
        // T√¨m c√°c nhi·ªám v·ª• s·∫Øp ƒë·∫øn h·∫°n trong 15 ph√∫t t·ªõi
        const upcomingTasks = await Task.find({
            isCompleted: false,
            dueDate: { $lte: new Date(now.getTime() + 15 * 60 * 1000), $gt: now }
        });

        for (const task of upcomingTasks) {
            const user = await User.findById(task.user);
            if (user && user.pushSubscription) {
                const payload = JSON.stringify({
                    title: 'üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•!',
                    body: `Nhi·ªám v·ª• "${task.title}" c√≤n ${minutesLeft} n·ªØa s·∫Ω h·∫øt h·∫°n.`
                });
                
                // G·ª≠i th√¥ng b√°o
                await webpush.sendNotification(user.pushSubscription, payload);
                console.log(`ƒê√£ g·ª≠i th√¥ng b√°o cho task: ${task.title}`);
            }
        }
    } catch (error) {
        console.error('L·ªói trong cron job:', error);
    }
});

webpush.setVapidDetails(
    process.env.VAPID_SUBJECT,
    process.env.VAPID_PUBLIC_KEY,
    process.env.VAPID_PRIVATE_KEY
);
const pushRoutes = require('./routes/pushRoutes');
app.use('/api/push', pushRoutes);

app.use(express.json());
app.use(express.static('public'));

// ƒê·ªãnh nghƒ©a route g·ªëc
app.get('/', (req, res) => {
  res.send('Server ƒë√£ s·∫µn s√†ng!');
});

// B·∫•t k·ª≥ y√™u c·∫ßu n√†o t·ªõi /api/tasks, h√£y ƒë·ªÉ taskRoutes x·ª≠ l√Ω
app.use('/api/tasks', taskRoutes);
app.use('/api/users', authRoutes);

// K·∫øt n·ªëi t·ªõi MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    console.log('K·∫øt n·ªëi th√†nh c√¥ng t·ªõi MongoDB!');
    // Ch·ªâ sau khi k·∫øt n·ªëi DB th√†nh c√¥ng, ch√∫ng ta m·ªõi ch·∫°y server
    app.listen(PORT, () => {
      console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    });
  })
  .catch((err) => {
    console.error('L·ªói k·∫øt n·ªëi MongoDB:', err);
  });
// Ch√∫ √Ω: Di chuy·ªÉn app.listen v√†o trong .then()
