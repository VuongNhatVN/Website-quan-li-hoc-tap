require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const webpush = require('web-push');
const cron = require('node-cron');
const Task = require('./models/Task');
const User = require('./models/User');

// --- C·∫•u h√¨nh (Kh√¥ng ƒë·ªïi) ---
const app = express();
const PORT = process.env.PORT || 3000;
app.use(express.static('public'));
app.use(express.json());
try {
    webpush.setVapidDetails(process.env.VAPID_SUBJECT, process.env.VAPID_PUBLIC_KEY, process.env.VAPID_PRIVATE_KEY);
    console.log("‚úÖ VAPID keys ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.");
} catch (error) {
    console.error("‚ùå L·ªñI C·∫§U H√åNH VAPID KEYS:", error);
}
app.use('/api/tasks', require('./routes/taskRoutes'));
app.use('/api/users', require('./routes/authRoutes'));
app.use('/api/push', require('./routes/pushRoutes'));
mongoose.connect(process.env.MONGO_URI)
    .then(() => {
        console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');
        app.listen(PORT, () => console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i Port: ${PORT}`));
    })
    .catch((err) => console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err));

// --- T√°c v·ª• ki·ªÉm tra ƒë·ªãnh k·ª≥ (Cron Job) - PHI√äN B·∫¢N HO√ÄN CH·ªàNH ---
cron.schedule('* * * * *', async () => {
    const now = new Date();
    console.log(`[${now.toISOString()}] Cron job: B·∫Øt ƒë·∫ßu ki·ªÉm tra...`);

    // --- G·ª¨I TH√îNG B√ÅO "S·∫ÆP ƒê·∫æN H·∫†N" (15 PH√öT) ---
    const fifteenMinutesFromNow = new Date(now.getTime() + 15 * 60 * 1000);
    try {
        const upcomingTasks = await Task.find({
            isCompleted: false,
            dueDate: { $gte: now, $lte: fifteenMinutesFromNow },
            'notified.upcoming': { $ne: true }
        });
        if (upcomingTasks.length > 0) console.log(` -> T√¨m th·∫•y ${upcomingTasks.length} nhi·ªám v·ª• S·∫ÆP ƒë·∫øn h·∫°n.`);
        for (const task of upcomingTasks) {
            await sendNotificationForTask(task, 'upcoming');
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi ki·ªÉm tra nhi·ªám v·ª• s·∫Øp ƒë·∫øn h·∫°n:', error);
    }

    // --- G·ª¨I TH√îNG B√ÅO "ƒê√É ƒê·∫æN H·∫†N" (TRONG 1 PH√öT V·ª™A QUA) ---
    const oneMinuteAgo = new Date(now.getTime() - 60 * 1000);
    try {
        const dueTasks = await Task.find({
            isCompleted: false,
            dueDate: { $lte: now, $gt: oneMinuteAgo },
            'notified.due': { $ne: true }
        });
        if (dueTasks.length > 0) console.log(` -> T√¨m th·∫•y ${dueTasks.length} nhi·ªám v·ª• V·ª™A ƒë·∫øn h·∫°n.`);
        for (const task of dueTasks) {
            await sendNotificationForTask(task, 'due');
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi ki·ªÉm tra nhi·ªám v·ª• ƒë√£ ƒë·∫øn h·∫°n:', error);
    }
    console.log(`[${new Date().toISOString()}] Cron job: K·∫øt th√∫c chu k·ª≥.`);
});

// H√†m tr·ª£ gi√∫p ƒë·ªÉ g·ª≠i th√¥ng b√°o v√† c·∫≠p nh·∫≠t DB
async function sendNotificationForTask(task, type) {
    const user = await User.findById(task.user);
    if (!user || !user.pushSubscription) return;

    let bodyText = '';
    if (type === 'upcoming') {
        bodyText = `Nhi·ªám v·ª• "${task.title}" s·∫Ω h·∫øt h·∫°n trong v√≤ng 15 ph√∫t n·ªØa!`;
    } else { // type === 'due'
        bodyText = `ƒê√£ ƒë·∫øn h·∫°n ho√†n th√†nh nhi·ªám v·ª• "${task.title}"!`;
    }

    const payload = JSON.stringify({ title: 'üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•!', body: bodyText });

    try {
        console.log(`   - Chu·∫©n b·ªã g·ª≠i th√¥ng b√°o "${type}" cho task: "${task.title}"...`);
        await webpush.sendNotification(user.pushSubscription, payload);
        console.log(`   - ‚úÖ G·ª≠i th√†nh c√¥ng!`);
        
        // ƒê√°nh d·∫•u ƒë√£ th√¥ng b√°o ƒë·ªÉ kh√¥ng g·ª≠i l·∫°i
        task.notified[type] = true;
        await Task.findByIdAndUpdate(task._id, { notified: task.notified });

    } catch (error) {
        if (error.statusCode === 410) { // Subscription h·∫øt h·∫°n
            console.log(`   - ‚ùó Subscription h·∫øt h·∫°n cho user ${user.email}. ƒêang x√≥a...`);
            user.pushSubscription = null;
            await user.save();
        } else {
            console.error(`   - ‚ùå L·ªói khi g·ª≠i th√¥ng b√°o:`, error.body || error);
        }
    }
}