require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const webpush = require('web-push');
const cron = require('node-cron');
const Task = require('./models/Task');
const User = require('./models/User');

// --- C·∫•u h√¨nh Express ---
const app = express();
const PORT = process.env.PORT || 3000;
app.use(express.static('public'));
app.use(express.json());

// --- C·∫•u h√¨nh Web Push ---
try {
    webpush.setVapidDetails(
        process.env.VAPID_SUBJECT,
        process.env.VAPID_PUBLIC_KEY,
        process.env.VAPID_PRIVATE_KEY
    );
    console.log("‚úÖ VAPID keys ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng.");
} catch (error) {
    console.error("‚ùå L·ªñI NGHI√äM TR·ªåNG: Kh√¥ng th·ªÉ c·∫•u h√¨nh VAPID keys. H√£y ki·ªÉm tra file .env v√† c√°c bi·∫øn m√¥i tr∆∞·ªùng tr√™n Render.", error);
}

// --- Routes ---
app.use('/api/tasks', require('./routes/taskRoutes'));
app.use('/api/users', require('./routes/authRoutes'));
app.use('/api/push', require('./routes/pushRoutes'));

// --- K·∫øt n·ªëi DB v√† kh·ªüi ch·∫°y Server ---
mongoose.connect(process.env.MONGO_URI)
    .then(() => {
        console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi MongoDB!');
        app.listen(PORT, () => console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`));
    })
    .catch((err) => console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err));

// --- T√°c v·ª• ki·ªÉm tra ƒë·ªãnh k·ª≥ (Cron Job) ---
cron.schedule('* * * * *', async () => {
    console.log(`[${new Date().toLocaleTimeString()}] Cron job: B·∫Øt ƒë·∫ßu ki·ªÉm tra c√°c nhi·ªám v·ª•...`);
    
    try {
        const now = new Date();
        const fifteenMinutesFromNow = new Date(now.getTime() + 15 * 60 * 1000);

        const tasksToNotify = await Task.find({
            isCompleted: false,
            dueDate: { $lte: fifteenMinutesFromNow, $gt: now }, // T√¨m task trong 15 ph√∫t t·ªõi
            'notified.upcoming': { $ne: true } // Ch·ªâ l·∫•y nh·ªØng task ch∆∞a ƒë∆∞·ª£c th√¥ng b√°o "s·∫Øp ƒë·∫øn h·∫°n"
        });

        console.log(`-> T√¨m th·∫•y ${tasksToNotify.length} nhi·ªám v·ª• s·∫Øp ƒë·∫øn h·∫°n c·∫ßn th√¥ng b√°o.`);

        for (const task of tasksToNotify) {
            const user = await User.findById(task.user);
            if (user && user.pushSubscription) {
                const payload = JSON.stringify({
                    title: 'üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•!',
                    body: `Nhi·ªám v·ª• "${task.title}" s·∫Ω h·∫øt h·∫°n trong v√≤ng 15 ph√∫t n·ªØa!`
                });
                
                try {
                    console.log(`   - ƒêang chu·∫©n b·ªã g·ª≠i th√¥ng b√°o cho task: "${task.title}"...`);
                    await webpush.sendNotification(user.pushSubscription, payload);
                    console.log(`   - ‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng!`);

                    // ƒê√°nh d·∫•u l√† ƒë√£ th√¥ng b√°o ƒë·ªÉ kh√¥ng g·ª≠i l·∫°i
                    task.notified = { ...task.notified, upcoming: true };
                    await task.save();

                } catch (error) {
                    // N·∫øu subscription h·∫øt h·∫°n (l·ªói 410), x√≥a n√≥ ƒëi
                    if (error.statusCode === 410) {
                        console.log(`   - ‚ùó Subscription cho user ${user.email} ƒë√£ h·∫øt h·∫°n. ƒêang x√≥a...`);
                        user.pushSubscription = null;
                        await user.save();
                    } else {
                        console.error(`   - ‚ùå L·ªói khi g·ª≠i th√¥ng b√°o cho task "${task.title}":`, error.body || error);
                    }
                }
            }
        }
    } catch (error) {
        console.error('‚ùå L·ªói nghi√™m tr·ªçng trong cron job:', error);
    }
    console.log(`[${new Date().toLocaleTimeString()}] Cron job: K·∫øt th√∫c chu k·ª≥ ki·ªÉm tra.`);
});

// Th√™m m·ªôt tr∆∞·ªùng 'notified' v√†o Task model ƒë·ªÉ theo d√µi
// M·ªü file models/Task.js v√† th√™m v√†o schema:
// notified: { type: Object, default: { upcoming: false, due: false } }