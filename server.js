require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const webpush = require('web-push');
const cron = require('node-cron');
const Task = require('./models/Task');
const User = require('./models/User');

const vapidKeys = {
    publicKey: process.env.VAPID_PUBLIC_KEY,
    privateKey: process.env.VAPID_PRIVATE_KEY
};
webpush.setVapidDetails(
    'mailto:vuonggame1217@gmail.com',
    vapidKeys.publicKey,
    vapidKeys.privateKey
);

const app = express();
const PORT = process.env.PORT || 3000;
app.use(express.static('public'));
app.use(express.json());
try {
    webpush.setVapidDetails(process.env.VAPID_SUBJECT, process.env.VAPID_PUBLIC_KEY, process.env.VAPID_PRIVATE_KEY);
    console.log("‚úÖ VAPID keys ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.");
} catch (error) {
    console.error("‚ùå L·ªñI C·∫§U H√åNH VAPID KEYS:", error);
}
app.use('/api/tasks', require('./routes/taskRoutes'));
app.use('/api/users', require('./routes/authRoutes'));
app.use('/api/push', require('./routes/pushRoutes'));
mongoose.connect(process.env.MONGO_URI)
    .then(() => {
        console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');
        app.listen(PORT, () => console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i Port: ${PORT}`));
    })
    .catch((err) => console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err));

// --- T√°c v·ª• ki·ªÉm tra ƒë·ªãnh k·ª≥ (Cron Job) - PHI√äN B·∫¢N HO√ÄN CH·ªàNH ---
cron.schedule('* * * * *', async () => {
    console.log('ƒêang ki·ªÉm tra nhi·ªám v·ª• c·∫ßn nh·∫Øc nh·ªü...');
    try {
        const now = new Date();
        // T√¨m c√°c task ch∆∞a ho√†n th√†nh v√† ch∆∞a ƒë∆∞·ª£c nh·∫Øc nh·ªü l·∫ßn cu·ªëi (th√™m c·ªù ƒë·ªÉ tr√°nh spam)
        // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt tr∆∞·ªùng 'lastRemindedAt' trong Task schema
        const tasksToRemind = await Task.find({
            completed: false,
            dueDate: { $gte: now } // Ch·ªâ nh·∫Øc cho task ch∆∞a qu√° h·∫°n (ho·∫∑c t√πy logic c·ªßa b·∫°n)
            // Th√™m ƒëi·ªÅu ki·ªán l·ªçc ƒë·ªÉ tr√°nh nh·∫Øc l·∫°i qu√° nhanh n·∫øu c·∫ßn
            // V√≠ d·ª•: $or: [{ lastRemindedAt: null }, { lastRemindedAt: { $lt: someTimeAgo } }]
        }).populate('user', 'reminderTimes pushSubscription'); // L·∫•y th√¥ng tin user li√™n quan

        for (const task of tasksToRemind) {
            if (!task.user || !task.user.pushSubscription || !task.user.reminderTimes) {
                continue; // B·ªè qua n·∫øu kh√¥ng c√≥ th√¥ng tin user ho·∫∑c push subscription ho·∫∑c reminderTimes
            }

            const dueDate = new Date(task.dueDate);
            const timeDiffMinutes = Math.round((dueDate - now) / (1000 * 60)); // Th·ªùi gian c√≤n l·∫°i (ph√∫t)

            // L·∫•y danh s√°ch th·ªùi gian nh·∫Øc nh·ªü c·ªßa user, s·∫Øp x·∫øp gi·∫£m d·∫ßn ƒë·ªÉ x·ª≠ l√Ω m·ªëc l·ªõn nh·∫•t tr∆∞·ªõc
            const userReminderTimes = [...task.user.reminderTimes].sort((a, b) => b - a);

            for (const remindBeforeMinutes of userReminderTimes) {
                // Ki·ªÉm tra xem c√≥ kh·ªõp v·ªõi m·ªëc th·ªùi gian nh·∫Øc nh·ªü kh√¥ng (v·ªõi sai s·ªë nh·ªè, v√≠ d·ª• 1 ph√∫t)
                if (timeDiffMinutes >= remindBeforeMinutes -1 && timeDiffMinutes <= remindBeforeMinutes + 1) {
                    // Ki·ªÉm tra xem ƒë√£ nh·∫Øc cho m·ªëc n√†y g·∫ßn ƒë√¢y ch∆∞a (c·∫ßn tr∆∞·ªùng lastRemindedAt)
                    // V√≠ d·ª•: if (!task.lastRemindedAt || task.lastRemindedAt < now - kho·∫£ng th·ªùi gian t·ªëi thi·ªÉu) {
                        console.log(`G·ª≠i nh·∫Øc nh·ªü cho task "${task.name}" (${remindBeforeMinutes} ph√∫t tr∆∞·ªõc h·∫°n)`);
                        sendReminderNotification(task.user.pushSubscription, task, timeDiffMinutes);

                        // C·∫≠p nh·∫≠t th·ªùi gian nh·∫Øc nh·ªü cu·ªëi c√πng cho task (quan tr·ªçng ƒë·ªÉ tr√°nh spam)
                        // await Task.findByIdAndUpdate(task._id, { lastRemindedAt: now });

                        break; // Ch·ªâ g·ª≠i 1 nh·∫Øc nh·ªü m·ªói l·∫ßn ki·ªÉm tra (cho m·ªëc l·ªõn nh·∫•t kh·ªõp)
                    // }
                }
            }
        }
    } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra nh·∫Øc nh·ªü:', error);
    }
});

// H√†m tr·ª£ gi√∫p ƒë·ªÉ g·ª≠i th√¥ng b√°o v√† c·∫≠p nh·∫≠t DB
async function sendNotificationForTask(task, type) {
    const user = await User.findById(task.user);
    if (!user || !user.pushSubscription) return;

    let bodyText = '';
    if (type === 'upcoming') {
        bodyText = `Nhi·ªám v·ª• "${task.title}" s·∫Ω h·∫øt h·∫°n trong v√≤ng 15 ph√∫t n·ªØa!`;
    } else { // type === 'due'
        bodyText = `ƒê√£ ƒë·∫øn h·∫°n ho√†n th√†nh nhi·ªám v·ª• "${task.title}"!`;
    }

    const payload = JSON.stringify({ title: 'üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•!', body: bodyText });

    try {
        console.log(`   - Chu·∫©n b·ªã g·ª≠i th√¥ng b√°o "${type}" cho task: "${task.title}"...`);
        await webpush.sendNotification(user.pushSubscription, payload);
        console.log(`   - ‚úÖ G·ª≠i th√†nh c√¥ng!`);
        
        // ƒê√°nh d·∫•u ƒë√£ th√¥ng b√°o ƒë·ªÉ kh√¥ng g·ª≠i l·∫°i
        task.notified[type] = true;
        await Task.findByIdAndUpdate(task._id, { notified: task.notified });

    } catch (error) {
        if (error.statusCode === 410) { // Subscription h·∫øt h·∫°n
            console.log(`   - ‚ùó Subscription h·∫øt h·∫°n cho user ${user.email}. ƒêang x√≥a...`);
            user.pushSubscription = null;
            await user.save();
        } else {
            console.error(`   - ‚ùå L·ªói khi g·ª≠i th√¥ng b√°o:`, error.body || error);
        }
    }
}
function sendReminderNotification(subscription, task, minutesRemaining) {
    const payload = JSON.stringify({
        title: `Nh·∫Øc nh·ªü: ${task.name}`,
        body: `Nhi·ªám v·ª• s·∫Øp ƒë·∫øn h·∫°n. ${formatTimeRemaining(minutesRemaining)}`,
        tag: `task-reminder-${task._id}`, // Tag ƒë·ªÉ nh√≥m th√¥ng b√°o n·∫øu c·∫ßn
        data: { taskId: task._id } // D·ªØ li·ªáu k√®m theo n·∫øu c·∫ßn
    });

    webpush.sendNotification(subscription, payload)
        .catch(error => console.error('L·ªói g·ª≠i push notification:', error));
}

// H√†m ƒë·ªãnh d·∫°ng th·ªùi gian c√≤n l·∫°i
function formatTimeRemaining(minutes) {
    if (minutes <= 0) {
        return "ƒê√£ ƒë·∫øn h·∫°n!";
    }
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;

    let remaining = 'C√≤n l·∫°i ';
    if (hours > 0) {
        remaining += `${hours} gi·ªù `;
    }
    if (mins > 0) {
        remaining += `${mins} ph√∫t`;
    }
    return remaining.trim() + '.';
}