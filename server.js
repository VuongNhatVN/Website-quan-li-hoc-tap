require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const webpush = require('web-push');
const cron = require('node-cron');
const Task = require('./models/Task');
const User = require('./models/User');

// --- C·∫•u h√¨nh (Kh√¥ng ƒë·ªïi) ---
const app = express();
const PORT = process.env.PORT || 3000;
app.use(express.static('public'));
app.use(express.json());
try {
    webpush.setVapidDetails(process.env.VAPID_SUBJECT, process.env.VAPID_PUBLIC_KEY, process.env.VAPID_PRIVATE_KEY);
    console.log("‚úÖ VAPID keys ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.");
} catch (error) {
    console.error("‚ùå L·ªñI C·∫§U H√åNH VAPID KEYS:", error);
}
app.use('/api/tasks', require('./routes/taskRoutes'));
app.use('/api/users', require('./routes/authRoutes'));
app.use('/api/push', require('./routes/pushRoutes'));
mongoose.connect(process.env.MONGO_URI)
    .then(() => {
        console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');
        app.listen(PORT, () => console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i Port: ${PORT}`));
    })
    .catch((err) => console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err));

const REMINDER_MAP = {
    '5m': 5,
    '15m': 15,
    '30m': 30,
    '1h': 60,
    '2h': 120,
    '5h': 300,
};

// --- T√°c v·ª• ki·ªÉm tra ƒë·ªãnh k·ª≥ (Cron Job)
cron.schedule('* * * * *', async () => {
    const now = new Date();
    console.log(`[${now.toISOString()}] Cron job: B·∫Øt ƒë·∫ßu ki·ªÉm tra...`);

    try {
        // 1. T√¨m T·∫§T C·∫¢ c√°c nhi·ªám v·ª• ch∆∞a ho√†n th√†nh v√† c√≤n h·∫°n
        const allTasks = await Task.find({
            isCompleted: false,
            dueDate: { $gt: now }
        });

        console.log(` -> T√¨m th·∫•y ${allTasks.length} nhi·ªám v·ª• ƒëang ho·∫°t ƒë·ªông.`);

        // 2. L·∫∑p qua t·ª´ng task v√† x·ª≠ l√Ω logic
        for (const task of allTasks) {
            const dueDate = new Date(task.dueDate);

            // 3. L·∫∑p qua c√°c m·ªëc th·ªùi gian m√† ng∆∞·ªùi d√πng ƒë√£ ch·ªçn
            for (const reminderKey of task.reminderTimes) {
                const minutesBefore = REMINDER_MAP[reminderKey];
                if (!minutesBefore) continue; // B·ªè qua n·∫øu key kh√¥ng h·ª£p l·ªá

                // 4. T√≠nh to√°n th·ªùi ƒëi·ªÉm g·ª≠i th√¥ng b√°o
                const reminderTime = new Date(dueDate.getTime() - minutesBefore * 60 * 1000);

                // 5. Ki·ªÉm tra xem ƒë√£ ƒë·∫øn l√∫c g·ª≠i th√¥ng b√°o ch∆∞a (trong v√≤ng 1 ph√∫t qua)
                const isDue = reminderTime <= now && reminderTime > new Date(now.getTime() - 60 * 1000);
                
                // 6. Ki·ªÉm tra xem ƒë√£ g·ª≠i th√¥ng b√°o n√†y bao gi·ªù ch∆∞a
                const notifiedKey = `upcoming_${reminderKey}`; // vd: 'upcoming_15m'
                const hasNotified = task.notified.get(notifiedKey);

                if (isDue && !hasNotified) {
                    await sendNotificationForTask(task, 'upcoming', reminderKey, minutesBefore);
                }
            }

            // 7. X·ª≠ l√Ω th√¥ng b√°o "ƒê√£ ƒë·∫øn h·∫°n" (nh∆∞ c≈©)
            const isTaskDue = dueDate <= now && dueDate > new Date(now.getTime() - 60 * 1000);
            if (isTaskDue && !task.notified.get('due')) {
                await sendNotificationForTask(task, 'due');
            }
        }
    } catch (error) {
        console.error('‚ùå L·ªói nghi√™m tr·ªçng trong cron job:', error);
    }
    console.log(`[${new Date().toISOString()}] Cron job: K·∫øt th√∫c chu k·ª≥.`);
});
// H√†m tr·ª£ gi√∫p ƒë·ªÉ g·ª≠i th√¥ng b√°o v√† c·∫≠p nh·∫≠t DB
async function sendNotificationForTask(task, type, reminderKey = '', minutesBefore = 0) {
    const user = await User.findById(task.user);
    if (!user || !user.pushSubscription) return;

    let bodyText = '';
    let notifiedKey = '';

    if (type === 'upcoming') {
        bodyText = `Nhi·ªám v·ª• "${task.title}" s·∫Ω h·∫øt h·∫°n trong kho·∫£ng ${reminderKey.replace('m', ' ph√∫t').replace('h', ' ti·∫øng')} n·ªØa!`;
        notifiedKey = `upcoming_${reminderKey}`; // vd: 'upcoming_15m'
    } else { // type === 'due'
        bodyText = `ƒê√£ ƒë·∫øn h·∫°n ho√†n th√†nh nhi·ªám v·ª• "${task.title}"!`;
        notifiedKey = 'due';
    }

    const payload = JSON.stringify({ title: 'üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•!', body: bodyText });

    try {
        console.log(`   - Chu·∫©n b·ªã g·ª≠i th√¥ng b√°o "${notifiedKey}" cho task: "${task.title}"...`);
        await webpush.sendNotification(user.pushSubscription, payload);
        console.log(`   - ‚úÖ G·ª≠i th√†nh c√¥ng!`);
        
        // ƒê√°nh d·∫•u ƒë√£ th√¥ng b√°o b·∫±ng c√°ch c·∫≠p nh·∫≠t Map
        // S·ª≠ d·ª•ng $set ƒë·ªÉ c·∫≠p nh·∫≠t m·ªôt tr∆∞·ªùng c·ª• th·ªÉ trong Map
        await Task.findByIdAndUpdate(task._id, { $set: { [`notified.${notiedKey}`]: true } });

    } catch (error) {
        if (error.statusCode === 410) {
            console.log(`   - ‚ùó Subscription h·∫øt h·∫°n cho user ${user.email}. ƒêang x√≥a...`);
            user.pushSubscription = null;
            await user.save();
        } else {
            console.error(`   - ‚ùå L·ªói khi g·ª≠i th√¥ng b√°o:`, error.body || error);
        }
    }
}