document.addEventListener('DOMContentLoaded', () => {
    // === PH·∫¶N 0: KI·ªÇM TRA X√ÅC TH·ª∞C & L·∫§Y TOKEN ===
    const token = localStorage.getItem('token');
    if (!token) {
        window.location.href = '/login.html';
        return; // D·ª´ng th·ª±c thi n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
    }

    // === PH·∫¶N 1: L·∫§Y C√ÅC ƒê·ªêI T∆Ø·ª¢NG HTML ===
    // Chuy·ªÉn to√†n b·ªô v√†o trong DOMContentLoaded
    const taskForm = document.getElementById('add-task-form');
    const taskTitleInput = document.getElementById('task-title');
    const taskDueDateInput = document.getElementById('task-due-date');
    const taskDueTimeInput = document.getElementById('task-due-time');
    const taskList = document.getElementById('task-list');
    const logoutBtn = document.getElementById('logout-btn');
    const enableNotificationsBtn = document.getElementById('enable-notifications-btn');
    const notificationSound = document.getElementById('notification-sound');
    const taskModal = document.getElementById('task-due-modal');
    const modalTaskTitle = document.getElementById('modal-task-title');
    const closeModalBtn = document.querySelector('.close-btn');

    const API_URL = '/api/tasks';
    let localTasks = [];
    let notificationIntervalId = null;

    // === PH·∫¶N 2: H√ÄM HI·ªÇN TH·ªä NHI·ªÜM V·ª§ ===
    const displayTasks = (tasks) => {
        localTasks = tasks;
        taskList.innerHTML = '';
        tasks.forEach(task => {
            const taskItem = document.createElement('li');
            taskItem.classList.add('task-item');
            if (task.isCompleted) { taskItem.classList.add('completed'); }
            taskItem.dataset.id = task._id;
            const options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };
            const formattedDate = new Date(task.dueDate).toLocaleString('vi-VN', options);
            taskItem.innerHTML = `
                <div class="task-info">
                    <strong>${task.title}</strong>
                    <p>H·∫°n ch√≥t: ${formattedDate}</p>
                </div>
                <div class="task-actions">
                    <button class="complete-btn">${task.isCompleted ? 'Ho√†n t√°c' : 'Ho√†n th√†nh'}</button>
                    <button class="delete-btn">X√≥a</button>
                </div>
            `;
            taskList.appendChild(taskItem);
        });
    };

    // === PH·∫¶N 3: H√ÄM L·∫§Y D·ªÆ LI·ªÜU T·ª™ BACKEND ===
    const fetchTasks = async () => {
        try {
            const response = await fetch(API_URL, { headers: { 'Authorization': `Bearer ${token}` } });
            if (response.status === 401) {
                localStorage.removeItem('token');
                window.location.href = '/login.html';
                return;
            }
            const tasks = await response.json();
            displayTasks(tasks);
        } catch (error) { console.error('L·ªói khi t·∫£i danh s√°ch nhi·ªám v·ª•:', error); }
    };

    // === PH·∫¶N 4: H√ÄM TH√äM NHI·ªÜM V·ª§ M·ªöI ===
    taskForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const title = taskTitleInput.value;
        const date = taskDueDateInput.value;
        const time = taskDueTimeInput.value;
        if (!title || !date || !time) return alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!');
        const dueDate = new Date(`${date}T${time}`);
        try {
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
                body: JSON.stringify({ title, dueDate: dueDate.toISOString() }),
            });
            if (response.ok) {
                taskForm.reset();
                fetchTasks();
            } else { alert('Th√™m nhi·ªám v·ª• th·∫•t b·∫°i!'); }
        } catch (error) { console.error('L·ªói khi th√™m nhi·ªám v·ª•:', error); }
    });

    // === PH·∫¶N 5: H√ÄM X√ìA V√Ä C·∫¨P NH·∫¨T NHI·ªÜM V·ª§ ===
    taskList.addEventListener('click', async (event) => {
        const target = event.target;
        const taskItem = target.closest('.task-item');
        if (!taskItem) return;
        const taskId = taskItem.dataset.id;
        if (target.classList.contains('delete-btn')) {
            try {
                const response = await fetch(`${API_URL}/${taskId}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } });
                if (response.ok) fetchTasks(); else alert('X√≥a th·∫•t b·∫°i!');
            } catch (error) { console.error('L·ªói khi x√≥a nhi·ªám v·ª•:', error); }
        }
        if (target.classList.contains('complete-btn')) {
            try {
                const isCompleted = !taskItem.classList.contains('completed');
                const response = await fetch(`${API_URL}/${taskId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
                    body: JSON.stringify({ isCompleted: isCompleted })
                });
                if (response.ok) fetchTasks(); else alert('C·∫≠p nh·∫≠t th·∫•t b·∫°i!');
            } catch (error) { console.error('L·ªói khi c·∫≠p nh·∫≠t nhi·ªám v·ª•:', error); }
        }
    });

    // === PH·∫¶N 6: ƒêƒÇNG XU·∫§T ===
    logoutBtn.addEventListener('click', () => {
        localStorage.removeItem('token');
        window.location.href = '/login.html';
    });
    
    // === PH·∫¶N 7: LOGIC TH√îNG B√ÅO & MODAL ===
    function openModal(taskTitle) {
        modalTaskTitle.textContent = `"${taskTitle}"`;
        taskModal.style.display = 'flex';
    }
    function closeModal() {
        taskModal.style.display = 'none';
    }
    function showCustomNotification(taskTitle, type) {
        let bodyText = '';
        if (type === 'upcoming') { bodyText = `Nhi·ªám v·ª• "${taskTitle}" s·∫Ω h·∫øt h·∫°n trong ${minutesLeft} ph√∫t n·ªØa!`; }
        else if (type === 'due') { bodyText = `ƒê√£ ƒë·∫øn h·∫°n ho√†n th√†nh nhi·ªám v·ª• "${taskTitle}"!`; }
        
        // Ph√°t √¢m thanh
        notificationSound.play().catch(error => console.log("L·ªói ph√°t √¢m thanh:", error));

        // Hi·ªÉn th·ªã th√¥ng b√°o tr√¨nh duy·ªát
        new Notification('üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•!', { body: bodyText, icon: '...' });
    }
    closeModalBtn.addEventListener('click', closeModal);
    window.addEventListener('click', (event) => {
        if (event.target == taskModal) { closeModal(); }
    });

    function showNotification(taskTitle, type) { /* ... */ }
    function markAsNotified(taskId, type) { /* ... */ }
    function hasBeenNotified(taskId, type) { /* ... */ }
    function checkTasksForNotification() {
        const now = new Date();
        const oneMinuteAgo = new Date(now.getTime() - 1 * 1000);

        localTasks.forEach(task => {
            if (task.isCompleted) return;

            const dueDate = new Date(task.dueDate);
            
            // T√≠nh to√°n kho·∫£ng c√°ch th·ªùi gian b·∫±ng mili gi√¢y
            const timeDiff = dueDate.getTime() - now.getTime();

            // 1. Ki·ªÉm tra th√¥ng b√°o "S·∫Øp ƒë·∫øn h·∫°n" (d∆∞·ªõi 15 ph√∫t v√† l·ªõn h∆°n 0)
            if (timeDiff > 0 && timeDiff <= 15 * 60 * 1000) {
                if (!hasBeenNotified(task._id, 'upcoming')) {
                    // Chuy·ªÉn ƒë·ªïi mili gi√¢y th√†nh ph√∫t v√† l√†m tr√≤n
                    const minutesLeft = Math.round(timeDiff / (1000 * 60));
                    // Truy·ªÅn s·ªë ph√∫t v√†o h√†m th√¥ng b√°o
                    showCustomNotification(task.title, 'upcoming', minutesLeft);
                    markAsNotified(task._id, 'upcoming');
                }
            }

            // 2. Ki·ªÉm tra th√¥ng b√°o "ƒê√£ ƒë·∫øn h·∫°n" (trong v√≤ng 1 ph√∫t v·ª´a qua)
            if (dueDate <= now && dueDate > oneMinuteAgo) {
                if (!hasBeenNotified(task._id, 'due')) {
                    showCustomNotification(task.title, 'due');
                    openModal(task.title);
                    markAsNotified(task._id, 'due');
                }
            }
        });
    }

    function initializeNotifications() {
        if (!("Notification" in window)) {
            enableNotificationsBtn.textContent = 'Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ üö´';
            enableNotificationsBtn.disabled = true;
            return;
        }

        const permission = Notification.permission;
        if (permission === 'granted') {
            enableNotificationsBtn.textContent = 'Th√¥ng b√°o ƒë√£ b·∫≠t ‚úÖ';
            enableNotificationsBtn.disabled = true;
            if (notificationIntervalId) clearInterval(notificationIntervalId);
            notificationIntervalId = setInterval(checkTasksForNotification, 60000);
        } else if (permission === 'denied') {
            enableNotificationsBtn.textContent = 'Th√¥ng b√°o ƒë√£ b·ªã ch·∫∑n üö´';
            enableNotificationsBtn.disabled = true;
            alert('B·∫°n ƒë√£ ch·∫∑n quy·ªÅn g·ª≠i th√¥ng b√°o. Vui l√≤ng v√†o c√†i ƒë·∫∑t c·ªßa tr√¨nh duy·ªát ƒë·ªÉ cho ph√©p.');
        } else { // 'default'
            enableNotificationsBtn.textContent = 'B·∫≠t th√¥ng b√°o üîî';
            enableNotificationsBtn.disabled = false;
        }
    }
    enableNotificationsBtn.addEventListener('click', () => {
        // Ch·ªâ h·ªèi quy·ªÅn n·∫øu tr·∫°ng th√°i l√† 'default'
        if (Notification.permission === 'default') {
            Notification.requestPermission().then(permission => {
                // Sau khi ng∆∞·ªùi d√πng ch·ªçn, c·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i n√∫t v√† b·ªô ƒë·∫øm
                initializeNotifications();
            });
        }
    });
    // === PH·∫¶N CU·ªêI: KH·ªûI CH·∫†Y BAN ƒê·∫¶U ===
    fetchTasks();
    initializeNotifications();
});

// C√ÅC H√ÄM H·ªñ TR·ª¢ CHO TH√îNG B√ÅO (ƒë·ªÉ b√™n ngo√†i cho g·ªçn)
function showNotification(taskTitle, type) {
    let bodyText = '';
    if (type === 'upcoming') { bodyText = `Nhi·ªám v·ª• "${taskTitle}" s·∫Ω h·∫øt h·∫°n trong 15 ph√∫t n·ªØa!`; }
    else if (type === 'due') { bodyText = `ƒê√£ ƒë·∫øn h·∫°n ho√†n th√†nh nhi·ªám v·ª• "${taskTitle}"!`; }
    const notification = new Notification('üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•!', {
        body: bodyText,
        icon: 'https://cdn-icons-png.flaticon.com/512/3239/3239958.png'
    });
}

function markAsNotified(taskId, type) {
    const notifiedTasks = JSON.parse(localStorage.getItem('notifiedTasks')) || {};
    if (!notifiedTasks[taskId]) { notifiedTasks[taskId] = []; }
    notifiedTasks[taskId].push(type);
    localStorage.setItem('notifiedTasks', JSON.stringify(notifiedTasks));
}

function hasBeenNotified(taskId, type) {
    const notifiedTasks = JSON.parse(localStorage.getItem('notifiedTasks')) || {};
    return notifiedTasks[taskId] && notifiedTasks[taskId].includes(type);
}